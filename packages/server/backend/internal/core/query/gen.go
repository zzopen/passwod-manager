// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	Account         *account
	AccountCategory *accountCategory
	Category        *category
	Website         *website
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Account = &Q.Account
	AccountCategory = &Q.AccountCategory
	Category = &Q.Category
	Website = &Q.Website
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		Account:         newAccount(db, opts...),
		AccountCategory: newAccountCategory(db, opts...),
		Category:        newCategory(db, opts...),
		Website:         newWebsite(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Account         account
	AccountCategory accountCategory
	Category        category
	Website         website
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Account:         q.Account.clone(db),
		AccountCategory: q.AccountCategory.clone(db),
		Category:        q.Category.clone(db),
		Website:         q.Website.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Account:         q.Account.replaceDB(db),
		AccountCategory: q.AccountCategory.replaceDB(db),
		Category:        q.Category.replaceDB(db),
		Website:         q.Website.replaceDB(db),
	}
}

type queryCtx struct {
	Account         IAccountDo
	AccountCategory IAccountCategoryDo
	Category        ICategoryDo
	Website         IWebsiteDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Account:         q.Account.WithContext(ctx),
		AccountCategory: q.AccountCategory.WithContext(ctx),
		Category:        q.Category.WithContext(ctx),
		Website:         q.Website.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
