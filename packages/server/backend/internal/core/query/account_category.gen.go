// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zzopen/z-note/backend/internal/core/model"
)

func newAccountCategory(db *gorm.DB, opts ...gen.DOOption) accountCategory {
	_accountCategory := accountCategory{}

	_accountCategory.accountCategoryDo.UseDB(db, opts...)
	_accountCategory.accountCategoryDo.UseModel(&model.AccountCategory{})

	tableName := _accountCategory.accountCategoryDo.TableName()
	_accountCategory.ALL = field.NewAsterisk(tableName)
	_accountCategory.Id = field.NewUint64(tableName, "id")
	_accountCategory.Creater = field.NewString(tableName, "creater")
	_accountCategory.Updater = field.NewString(tableName, "updater")
	_accountCategory.CreatedAt = field.NewField(tableName, "created_at")
	_accountCategory.UpdatedAt = field.NewField(tableName, "updated_at")
	_accountCategory.DataUpdatedAt = field.NewField(tableName, "data_updated_at")
	_accountCategory.CategoryId = field.NewUint64(tableName, "category_id")
	_accountCategory.AccountId = field.NewUint64(tableName, "account_id")
	_accountCategory.Status = field.NewUint8(tableName, "status")

	_accountCategory.fillFieldMap()

	return _accountCategory
}

type accountCategory struct {
	accountCategoryDo

	ALL           field.Asterisk
	Id            field.Uint64
	Creater       field.String
	Updater       field.String
	CreatedAt     field.Field
	UpdatedAt     field.Field
	DataUpdatedAt field.Field
	CategoryId    field.Uint64
	AccountId     field.Uint64
	Status        field.Uint8

	fieldMap map[string]field.Expr
}

func (a accountCategory) Table(newTableName string) *accountCategory {
	a.accountCategoryDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountCategory) As(alias string) *accountCategory {
	a.accountCategoryDo.DO = *(a.accountCategoryDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountCategory) updateTableName(table string) *accountCategory {
	a.ALL = field.NewAsterisk(table)
	a.Id = field.NewUint64(table, "id")
	a.Creater = field.NewString(table, "creater")
	a.Updater = field.NewString(table, "updater")
	a.CreatedAt = field.NewField(table, "created_at")
	a.UpdatedAt = field.NewField(table, "updated_at")
	a.DataUpdatedAt = field.NewField(table, "data_updated_at")
	a.CategoryId = field.NewUint64(table, "category_id")
	a.AccountId = field.NewUint64(table, "account_id")
	a.Status = field.NewUint8(table, "status")

	a.fillFieldMap()

	return a
}

func (a *accountCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountCategory) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.Id
	a.fieldMap["creater"] = a.Creater
	a.fieldMap["updater"] = a.Updater
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["data_updated_at"] = a.DataUpdatedAt
	a.fieldMap["category_id"] = a.CategoryId
	a.fieldMap["account_id"] = a.AccountId
	a.fieldMap["status"] = a.Status
}

func (a accountCategory) clone(db *gorm.DB) accountCategory {
	a.accountCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountCategory) replaceDB(db *gorm.DB) accountCategory {
	a.accountCategoryDo.ReplaceDB(db)
	return a
}

type accountCategoryDo struct{ gen.DO }

type IAccountCategoryDo interface {
	gen.SubQuery
	Debug() IAccountCategoryDo
	WithContext(ctx context.Context) IAccountCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAccountCategoryDo
	WriteDB() IAccountCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAccountCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAccountCategoryDo
	Not(conds ...gen.Condition) IAccountCategoryDo
	Or(conds ...gen.Condition) IAccountCategoryDo
	Select(conds ...field.Expr) IAccountCategoryDo
	Where(conds ...gen.Condition) IAccountCategoryDo
	Order(conds ...field.Expr) IAccountCategoryDo
	Distinct(cols ...field.Expr) IAccountCategoryDo
	Omit(cols ...field.Expr) IAccountCategoryDo
	Join(table schema.Tabler, on ...field.Expr) IAccountCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAccountCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAccountCategoryDo
	Group(cols ...field.Expr) IAccountCategoryDo
	Having(conds ...gen.Condition) IAccountCategoryDo
	Limit(limit int) IAccountCategoryDo
	Offset(offset int) IAccountCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountCategoryDo
	Unscoped() IAccountCategoryDo
	Create(values ...*model.AccountCategory) error
	CreateInBatches(values []*model.AccountCategory, batchSize int) error
	Save(values ...*model.AccountCategory) error
	First() (*model.AccountCategory, error)
	Take() (*model.AccountCategory, error)
	Last() (*model.AccountCategory, error)
	Find() ([]*model.AccountCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AccountCategory, err error)
	FindInBatches(result *[]*model.AccountCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AccountCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAccountCategoryDo
	Assign(attrs ...field.AssignExpr) IAccountCategoryDo
	Joins(fields ...field.RelationField) IAccountCategoryDo
	Preload(fields ...field.RelationField) IAccountCategoryDo
	FirstOrInit() (*model.AccountCategory, error)
	FirstOrCreate() (*model.AccountCategory, error)
	FindByPage(offset int, limit int) (result []*model.AccountCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAccountCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.AccountCategory, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (a accountCategoryDo) FilterWithNameAndRole(name string, role string) (result []model.AccountCategory, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM account_category WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a accountCategoryDo) Debug() IAccountCategoryDo {
	return a.withDO(a.DO.Debug())
}

func (a accountCategoryDo) WithContext(ctx context.Context) IAccountCategoryDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountCategoryDo) ReadDB() IAccountCategoryDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountCategoryDo) WriteDB() IAccountCategoryDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountCategoryDo) Session(config *gorm.Session) IAccountCategoryDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountCategoryDo) Clauses(conds ...clause.Expression) IAccountCategoryDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountCategoryDo) Returning(value interface{}, columns ...string) IAccountCategoryDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountCategoryDo) Not(conds ...gen.Condition) IAccountCategoryDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountCategoryDo) Or(conds ...gen.Condition) IAccountCategoryDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountCategoryDo) Select(conds ...field.Expr) IAccountCategoryDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountCategoryDo) Where(conds ...gen.Condition) IAccountCategoryDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountCategoryDo) Order(conds ...field.Expr) IAccountCategoryDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountCategoryDo) Distinct(cols ...field.Expr) IAccountCategoryDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountCategoryDo) Omit(cols ...field.Expr) IAccountCategoryDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountCategoryDo) Join(table schema.Tabler, on ...field.Expr) IAccountCategoryDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAccountCategoryDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IAccountCategoryDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountCategoryDo) Group(cols ...field.Expr) IAccountCategoryDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountCategoryDo) Having(conds ...gen.Condition) IAccountCategoryDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountCategoryDo) Limit(limit int) IAccountCategoryDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountCategoryDo) Offset(offset int) IAccountCategoryDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountCategoryDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountCategoryDo) Unscoped() IAccountCategoryDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountCategoryDo) Create(values ...*model.AccountCategory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountCategoryDo) CreateInBatches(values []*model.AccountCategory, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountCategoryDo) Save(values ...*model.AccountCategory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountCategoryDo) First() (*model.AccountCategory, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountCategory), nil
	}
}

func (a accountCategoryDo) Take() (*model.AccountCategory, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountCategory), nil
	}
}

func (a accountCategoryDo) Last() (*model.AccountCategory, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountCategory), nil
	}
}

func (a accountCategoryDo) Find() ([]*model.AccountCategory, error) {
	result, err := a.DO.Find()
	return result.([]*model.AccountCategory), err
}

func (a accountCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AccountCategory, err error) {
	buf := make([]*model.AccountCategory, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountCategoryDo) FindInBatches(result *[]*model.AccountCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountCategoryDo) Attrs(attrs ...field.AssignExpr) IAccountCategoryDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountCategoryDo) Assign(attrs ...field.AssignExpr) IAccountCategoryDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountCategoryDo) Joins(fields ...field.RelationField) IAccountCategoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountCategoryDo) Preload(fields ...field.RelationField) IAccountCategoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountCategoryDo) FirstOrInit() (*model.AccountCategory, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountCategory), nil
	}
}

func (a accountCategoryDo) FirstOrCreate() (*model.AccountCategory, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountCategory), nil
	}
}

func (a accountCategoryDo) FindByPage(offset int, limit int) (result []*model.AccountCategory, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountCategoryDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountCategoryDo) Delete(models ...*model.AccountCategory) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountCategoryDo) withDO(do gen.Dao) *accountCategoryDo {
	a.DO = *do.(*gen.DO)
	return a
}
