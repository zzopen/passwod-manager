// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zzopen/password-manager/backend/internal/core/model"
)

func newMyTest(db *gorm.DB, opts ...gen.DOOption) myTest {
	_myTest := myTest{}

	_myTest.myTestDo.UseDB(db, opts...)
	_myTest.myTestDo.UseModel(&model.MyTest{})

	tableName := _myTest.myTestDo.TableName()
	_myTest.ALL = field.NewAsterisk(tableName)
	_myTest.Id = field.NewUint64(tableName, "id")
	_myTest.Title = field.NewString(tableName, "title")
	_myTest.CreatedAt = field.NewField(tableName, "created_at")
	_myTest.UpdatedAt = field.NewField(tableName, "updated_at")
	_myTest.UpdatedAt2 = field.NewField(tableName, "updated_at2")

	_myTest.fillFieldMap()

	return _myTest
}

type myTest struct {
	myTestDo

	ALL        field.Asterisk
	Id         field.Uint64
	Title      field.String
	CreatedAt  field.Field
	UpdatedAt  field.Field
	UpdatedAt2 field.Field

	fieldMap map[string]field.Expr
}

func (m myTest) Table(newTableName string) *myTest {
	m.myTestDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m myTest) As(alias string) *myTest {
	m.myTestDo.DO = *(m.myTestDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *myTest) updateTableName(table string) *myTest {
	m.ALL = field.NewAsterisk(table)
	m.Id = field.NewUint64(table, "id")
	m.Title = field.NewString(table, "title")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")
	m.UpdatedAt2 = field.NewField(table, "updated_at2")

	m.fillFieldMap()

	return m
}

func (m *myTest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *myTest) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["id"] = m.Id
	m.fieldMap["title"] = m.Title
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["updated_at2"] = m.UpdatedAt2
}

func (m myTest) clone(db *gorm.DB) myTest {
	m.myTestDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m myTest) replaceDB(db *gorm.DB) myTest {
	m.myTestDo.ReplaceDB(db)
	return m
}

type myTestDo struct{ gen.DO }

type IMyTestDo interface {
	gen.SubQuery
	Debug() IMyTestDo
	WithContext(ctx context.Context) IMyTestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMyTestDo
	WriteDB() IMyTestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMyTestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMyTestDo
	Not(conds ...gen.Condition) IMyTestDo
	Or(conds ...gen.Condition) IMyTestDo
	Select(conds ...field.Expr) IMyTestDo
	Where(conds ...gen.Condition) IMyTestDo
	Order(conds ...field.Expr) IMyTestDo
	Distinct(cols ...field.Expr) IMyTestDo
	Omit(cols ...field.Expr) IMyTestDo
	Join(table schema.Tabler, on ...field.Expr) IMyTestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMyTestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMyTestDo
	Group(cols ...field.Expr) IMyTestDo
	Having(conds ...gen.Condition) IMyTestDo
	Limit(limit int) IMyTestDo
	Offset(offset int) IMyTestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMyTestDo
	Unscoped() IMyTestDo
	Create(values ...*model.MyTest) error
	CreateInBatches(values []*model.MyTest, batchSize int) error
	Save(values ...*model.MyTest) error
	First() (*model.MyTest, error)
	Take() (*model.MyTest, error)
	Last() (*model.MyTest, error)
	Find() ([]*model.MyTest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MyTest, err error)
	FindInBatches(result *[]*model.MyTest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MyTest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMyTestDo
	Assign(attrs ...field.AssignExpr) IMyTestDo
	Joins(fields ...field.RelationField) IMyTestDo
	Preload(fields ...field.RelationField) IMyTestDo
	FirstOrInit() (*model.MyTest, error)
	FirstOrCreate() (*model.MyTest, error)
	FindByPage(offset int, limit int) (result []*model.MyTest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMyTestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m myTestDo) Debug() IMyTestDo {
	return m.withDO(m.DO.Debug())
}

func (m myTestDo) WithContext(ctx context.Context) IMyTestDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m myTestDo) ReadDB() IMyTestDo {
	return m.Clauses(dbresolver.Read)
}

func (m myTestDo) WriteDB() IMyTestDo {
	return m.Clauses(dbresolver.Write)
}

func (m myTestDo) Session(config *gorm.Session) IMyTestDo {
	return m.withDO(m.DO.Session(config))
}

func (m myTestDo) Clauses(conds ...clause.Expression) IMyTestDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m myTestDo) Returning(value interface{}, columns ...string) IMyTestDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m myTestDo) Not(conds ...gen.Condition) IMyTestDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m myTestDo) Or(conds ...gen.Condition) IMyTestDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m myTestDo) Select(conds ...field.Expr) IMyTestDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m myTestDo) Where(conds ...gen.Condition) IMyTestDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m myTestDo) Order(conds ...field.Expr) IMyTestDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m myTestDo) Distinct(cols ...field.Expr) IMyTestDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m myTestDo) Omit(cols ...field.Expr) IMyTestDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m myTestDo) Join(table schema.Tabler, on ...field.Expr) IMyTestDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m myTestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMyTestDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m myTestDo) RightJoin(table schema.Tabler, on ...field.Expr) IMyTestDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m myTestDo) Group(cols ...field.Expr) IMyTestDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m myTestDo) Having(conds ...gen.Condition) IMyTestDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m myTestDo) Limit(limit int) IMyTestDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m myTestDo) Offset(offset int) IMyTestDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m myTestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMyTestDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m myTestDo) Unscoped() IMyTestDo {
	return m.withDO(m.DO.Unscoped())
}

func (m myTestDo) Create(values ...*model.MyTest) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m myTestDo) CreateInBatches(values []*model.MyTest, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m myTestDo) Save(values ...*model.MyTest) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m myTestDo) First() (*model.MyTest, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyTest), nil
	}
}

func (m myTestDo) Take() (*model.MyTest, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyTest), nil
	}
}

func (m myTestDo) Last() (*model.MyTest, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyTest), nil
	}
}

func (m myTestDo) Find() ([]*model.MyTest, error) {
	result, err := m.DO.Find()
	return result.([]*model.MyTest), err
}

func (m myTestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MyTest, err error) {
	buf := make([]*model.MyTest, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m myTestDo) FindInBatches(result *[]*model.MyTest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m myTestDo) Attrs(attrs ...field.AssignExpr) IMyTestDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m myTestDo) Assign(attrs ...field.AssignExpr) IMyTestDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m myTestDo) Joins(fields ...field.RelationField) IMyTestDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m myTestDo) Preload(fields ...field.RelationField) IMyTestDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m myTestDo) FirstOrInit() (*model.MyTest, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyTest), nil
	}
}

func (m myTestDo) FirstOrCreate() (*model.MyTest, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyTest), nil
	}
}

func (m myTestDo) FindByPage(offset int, limit int) (result []*model.MyTest, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m myTestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m myTestDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m myTestDo) Delete(models ...*model.MyTest) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *myTestDo) withDO(do gen.Dao) *myTestDo {
	m.DO = *do.(*gen.DO)
	return m
}
