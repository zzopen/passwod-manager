// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zz-cipher/common/core/model"
)

func newSecretCategory(db *gorm.DB, opts ...gen.DOOption) secretCategory {
	_secretCategory := secretCategory{}

	_secretCategory.secretCategoryDo.UseDB(db, opts...)
	_secretCategory.secretCategoryDo.UseModel(&model.SecretCategory{})

	tableName := _secretCategory.secretCategoryDo.TableName()
	_secretCategory.ALL = field.NewAsterisk(tableName)
	_secretCategory.Id = field.NewUint64(tableName, "id")
	_secretCategory.Name = field.NewString(tableName, "name")
	_secretCategory.Pid = field.NewUint64(tableName, "pid")
	_secretCategory.PidChain = field.NewString(tableName, "pid_chain")
	_secretCategory.CreatedAt = field.NewField(tableName, "created_at")
	_secretCategory.CreatedBy = field.NewString(tableName, "created_by")
	_secretCategory.UpdatedAt = field.NewField(tableName, "updated_at")
	_secretCategory.UpdatedBy = field.NewString(tableName, "updated_by")
	_secretCategory.DataUpdatedAt = field.NewField(tableName, "data_updated_at")
	_secretCategory.IsDel = field.NewUint8(tableName, "is_del")
	_secretCategory.DeletedAt = field.NewField(tableName, "deleted_at")
	_secretCategory.DeletedBy = field.NewString(tableName, "deleted_by")

	_secretCategory.fillFieldMap()

	return _secretCategory
}

type secretCategory struct {
	secretCategoryDo

	ALL           field.Asterisk
	Id            field.Uint64
	Name          field.String
	Pid           field.Uint64
	PidChain      field.String
	CreatedAt     field.Field
	CreatedBy     field.String
	UpdatedAt     field.Field
	UpdatedBy     field.String
	DataUpdatedAt field.Field
	IsDel         field.Uint8
	DeletedAt     field.Field
	DeletedBy     field.String

	fieldMap map[string]field.Expr
}

func (s secretCategory) Table(newTableName string) *secretCategory {
	s.secretCategoryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s secretCategory) As(alias string) *secretCategory {
	s.secretCategoryDo.DO = *(s.secretCategoryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *secretCategory) updateTableName(table string) *secretCategory {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewUint64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Pid = field.NewUint64(table, "pid")
	s.PidChain = field.NewString(table, "pid_chain")
	s.CreatedAt = field.NewField(table, "created_at")
	s.CreatedBy = field.NewString(table, "created_by")
	s.UpdatedAt = field.NewField(table, "updated_at")
	s.UpdatedBy = field.NewString(table, "updated_by")
	s.DataUpdatedAt = field.NewField(table, "data_updated_at")
	s.IsDel = field.NewUint8(table, "is_del")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.DeletedBy = field.NewString(table, "deleted_by")

	s.fillFieldMap()

	return s
}

func (s *secretCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *secretCategory) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.Id
	s.fieldMap["name"] = s.Name
	s.fieldMap["pid"] = s.Pid
	s.fieldMap["pid_chain"] = s.PidChain
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["updated_by"] = s.UpdatedBy
	s.fieldMap["data_updated_at"] = s.DataUpdatedAt
	s.fieldMap["is_del"] = s.IsDel
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["deleted_by"] = s.DeletedBy
}

func (s secretCategory) clone(db *gorm.DB) secretCategory {
	s.secretCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s secretCategory) replaceDB(db *gorm.DB) secretCategory {
	s.secretCategoryDo.ReplaceDB(db)
	return s
}

type secretCategoryDo struct{ gen.DO }

type ISecretCategoryDo interface {
	gen.SubQuery
	Debug() ISecretCategoryDo
	WithContext(ctx context.Context) ISecretCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISecretCategoryDo
	WriteDB() ISecretCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISecretCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISecretCategoryDo
	Not(conds ...gen.Condition) ISecretCategoryDo
	Or(conds ...gen.Condition) ISecretCategoryDo
	Select(conds ...field.Expr) ISecretCategoryDo
	Where(conds ...gen.Condition) ISecretCategoryDo
	Order(conds ...field.Expr) ISecretCategoryDo
	Distinct(cols ...field.Expr) ISecretCategoryDo
	Omit(cols ...field.Expr) ISecretCategoryDo
	Join(table schema.Tabler, on ...field.Expr) ISecretCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISecretCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISecretCategoryDo
	Group(cols ...field.Expr) ISecretCategoryDo
	Having(conds ...gen.Condition) ISecretCategoryDo
	Limit(limit int) ISecretCategoryDo
	Offset(offset int) ISecretCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISecretCategoryDo
	Unscoped() ISecretCategoryDo
	Create(values ...*model.SecretCategory) error
	CreateInBatches(values []*model.SecretCategory, batchSize int) error
	Save(values ...*model.SecretCategory) error
	First() (*model.SecretCategory, error)
	Take() (*model.SecretCategory, error)
	Last() (*model.SecretCategory, error)
	Find() ([]*model.SecretCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SecretCategory, err error)
	FindInBatches(result *[]*model.SecretCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SecretCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISecretCategoryDo
	Assign(attrs ...field.AssignExpr) ISecretCategoryDo
	Joins(fields ...field.RelationField) ISecretCategoryDo
	Preload(fields ...field.RelationField) ISecretCategoryDo
	FirstOrInit() (*model.SecretCategory, error)
	FirstOrCreate() (*model.SecretCategory, error)
	FindByPage(offset int, limit int) (result []*model.SecretCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISecretCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s secretCategoryDo) Debug() ISecretCategoryDo {
	return s.withDO(s.DO.Debug())
}

func (s secretCategoryDo) WithContext(ctx context.Context) ISecretCategoryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s secretCategoryDo) ReadDB() ISecretCategoryDo {
	return s.Clauses(dbresolver.Read)
}

func (s secretCategoryDo) WriteDB() ISecretCategoryDo {
	return s.Clauses(dbresolver.Write)
}

func (s secretCategoryDo) Session(config *gorm.Session) ISecretCategoryDo {
	return s.withDO(s.DO.Session(config))
}

func (s secretCategoryDo) Clauses(conds ...clause.Expression) ISecretCategoryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s secretCategoryDo) Returning(value interface{}, columns ...string) ISecretCategoryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s secretCategoryDo) Not(conds ...gen.Condition) ISecretCategoryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s secretCategoryDo) Or(conds ...gen.Condition) ISecretCategoryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s secretCategoryDo) Select(conds ...field.Expr) ISecretCategoryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s secretCategoryDo) Where(conds ...gen.Condition) ISecretCategoryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s secretCategoryDo) Order(conds ...field.Expr) ISecretCategoryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s secretCategoryDo) Distinct(cols ...field.Expr) ISecretCategoryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s secretCategoryDo) Omit(cols ...field.Expr) ISecretCategoryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s secretCategoryDo) Join(table schema.Tabler, on ...field.Expr) ISecretCategoryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s secretCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISecretCategoryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s secretCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) ISecretCategoryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s secretCategoryDo) Group(cols ...field.Expr) ISecretCategoryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s secretCategoryDo) Having(conds ...gen.Condition) ISecretCategoryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s secretCategoryDo) Limit(limit int) ISecretCategoryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s secretCategoryDo) Offset(offset int) ISecretCategoryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s secretCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISecretCategoryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s secretCategoryDo) Unscoped() ISecretCategoryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s secretCategoryDo) Create(values ...*model.SecretCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s secretCategoryDo) CreateInBatches(values []*model.SecretCategory, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s secretCategoryDo) Save(values ...*model.SecretCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s secretCategoryDo) First() (*model.SecretCategory, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SecretCategory), nil
	}
}

func (s secretCategoryDo) Take() (*model.SecretCategory, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SecretCategory), nil
	}
}

func (s secretCategoryDo) Last() (*model.SecretCategory, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SecretCategory), nil
	}
}

func (s secretCategoryDo) Find() ([]*model.SecretCategory, error) {
	result, err := s.DO.Find()
	return result.([]*model.SecretCategory), err
}

func (s secretCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SecretCategory, err error) {
	buf := make([]*model.SecretCategory, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s secretCategoryDo) FindInBatches(result *[]*model.SecretCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s secretCategoryDo) Attrs(attrs ...field.AssignExpr) ISecretCategoryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s secretCategoryDo) Assign(attrs ...field.AssignExpr) ISecretCategoryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s secretCategoryDo) Joins(fields ...field.RelationField) ISecretCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s secretCategoryDo) Preload(fields ...field.RelationField) ISecretCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s secretCategoryDo) FirstOrInit() (*model.SecretCategory, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SecretCategory), nil
	}
}

func (s secretCategoryDo) FirstOrCreate() (*model.SecretCategory, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SecretCategory), nil
	}
}

func (s secretCategoryDo) FindByPage(offset int, limit int) (result []*model.SecretCategory, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s secretCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s secretCategoryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s secretCategoryDo) Delete(models ...*model.SecretCategory) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *secretCategoryDo) withDO(do gen.Dao) *secretCategoryDo {
	s.DO = *do.(*gen.DO)
	return s
}
