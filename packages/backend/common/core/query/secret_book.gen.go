// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zz-cipher/common/core/model"
)

func newSecretBook(db *gorm.DB, opts ...gen.DOOption) secretBook {
	_secretBook := secretBook{}

	_secretBook.secretBookDo.UseDB(db, opts...)
	_secretBook.secretBookDo.UseModel(&model.SecretBook{})

	tableName := _secretBook.secretBookDo.TableName()
	_secretBook.ALL = field.NewAsterisk(tableName)
	_secretBook.Id = field.NewUint64(tableName, "id")
	_secretBook.SecretCategoryId = field.NewUint64(tableName, "secret_category_id")
	_secretBook.Title = field.NewString(tableName, "title")
	_secretBook.Website = field.NewString(tableName, "website")
	_secretBook.Username = field.NewString(tableName, "username")
	_secretBook.Password = field.NewString(tableName, "password")
	_secretBook.Email = field.NewString(tableName, "email")
	_secretBook.Mobile = field.NewString(tableName, "mobile")
	_secretBook.Remark = field.NewString(tableName, "remark")
	_secretBook.CreatedAt = field.NewField(tableName, "created_at")
	_secretBook.CreatedBy = field.NewString(tableName, "created_by")
	_secretBook.UpdatedAt = field.NewField(tableName, "updated_at")
	_secretBook.UpdatedBy = field.NewString(tableName, "updated_by")
	_secretBook.DataUpdatedAt = field.NewField(tableName, "data_updated_at")
	_secretBook.IsDel = field.NewUint8(tableName, "is_del")
	_secretBook.DeletedAt = field.NewField(tableName, "deleted_at")
	_secretBook.DeletedBy = field.NewString(tableName, "deleted_by")
	_secretBook.SecretCategory = secretBookBelongsToSecretCategory{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SecretCategory", "model.SecretCategory"),
	}

	_secretBook.fillFieldMap()

	return _secretBook
}

type secretBook struct {
	secretBookDo

	ALL              field.Asterisk
	Id               field.Uint64
	SecretCategoryId field.Uint64
	Title            field.String
	Website          field.String
	Username         field.String
	Password         field.String
	Email            field.String
	Mobile           field.String
	Remark           field.String
	CreatedAt        field.Field
	CreatedBy        field.String
	UpdatedAt        field.Field
	UpdatedBy        field.String
	DataUpdatedAt    field.Field
	IsDel            field.Uint8
	DeletedAt        field.Field
	DeletedBy        field.String
	SecretCategory   secretBookBelongsToSecretCategory

	fieldMap map[string]field.Expr
}

func (s secretBook) Table(newTableName string) *secretBook {
	s.secretBookDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s secretBook) As(alias string) *secretBook {
	s.secretBookDo.DO = *(s.secretBookDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *secretBook) updateTableName(table string) *secretBook {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewUint64(table, "id")
	s.SecretCategoryId = field.NewUint64(table, "secret_category_id")
	s.Title = field.NewString(table, "title")
	s.Website = field.NewString(table, "website")
	s.Username = field.NewString(table, "username")
	s.Password = field.NewString(table, "password")
	s.Email = field.NewString(table, "email")
	s.Mobile = field.NewString(table, "mobile")
	s.Remark = field.NewString(table, "remark")
	s.CreatedAt = field.NewField(table, "created_at")
	s.CreatedBy = field.NewString(table, "created_by")
	s.UpdatedAt = field.NewField(table, "updated_at")
	s.UpdatedBy = field.NewString(table, "updated_by")
	s.DataUpdatedAt = field.NewField(table, "data_updated_at")
	s.IsDel = field.NewUint8(table, "is_del")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.DeletedBy = field.NewString(table, "deleted_by")

	s.fillFieldMap()

	return s
}

func (s *secretBook) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *secretBook) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 18)
	s.fieldMap["id"] = s.Id
	s.fieldMap["secret_category_id"] = s.SecretCategoryId
	s.fieldMap["title"] = s.Title
	s.fieldMap["website"] = s.Website
	s.fieldMap["username"] = s.Username
	s.fieldMap["password"] = s.Password
	s.fieldMap["email"] = s.Email
	s.fieldMap["mobile"] = s.Mobile
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["updated_by"] = s.UpdatedBy
	s.fieldMap["data_updated_at"] = s.DataUpdatedAt
	s.fieldMap["is_del"] = s.IsDel
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["deleted_by"] = s.DeletedBy

}

func (s secretBook) clone(db *gorm.DB) secretBook {
	s.secretBookDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s secretBook) replaceDB(db *gorm.DB) secretBook {
	s.secretBookDo.ReplaceDB(db)
	return s
}

type secretBookBelongsToSecretCategory struct {
	db *gorm.DB

	field.RelationField
}

func (a secretBookBelongsToSecretCategory) Where(conds ...field.Expr) *secretBookBelongsToSecretCategory {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a secretBookBelongsToSecretCategory) WithContext(ctx context.Context) *secretBookBelongsToSecretCategory {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a secretBookBelongsToSecretCategory) Session(session *gorm.Session) *secretBookBelongsToSecretCategory {
	a.db = a.db.Session(session)
	return &a
}

func (a secretBookBelongsToSecretCategory) Model(m *model.SecretBook) *secretBookBelongsToSecretCategoryTx {
	return &secretBookBelongsToSecretCategoryTx{a.db.Model(m).Association(a.Name())}
}

type secretBookBelongsToSecretCategoryTx struct{ tx *gorm.Association }

func (a secretBookBelongsToSecretCategoryTx) Find() (result *model.SecretCategory, err error) {
	return result, a.tx.Find(&result)
}

func (a secretBookBelongsToSecretCategoryTx) Append(values ...*model.SecretCategory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a secretBookBelongsToSecretCategoryTx) Replace(values ...*model.SecretCategory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a secretBookBelongsToSecretCategoryTx) Delete(values ...*model.SecretCategory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a secretBookBelongsToSecretCategoryTx) Clear() error {
	return a.tx.Clear()
}

func (a secretBookBelongsToSecretCategoryTx) Count() int64 {
	return a.tx.Count()
}

type secretBookDo struct{ gen.DO }

type ISecretBookDo interface {
	gen.SubQuery
	Debug() ISecretBookDo
	WithContext(ctx context.Context) ISecretBookDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISecretBookDo
	WriteDB() ISecretBookDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISecretBookDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISecretBookDo
	Not(conds ...gen.Condition) ISecretBookDo
	Or(conds ...gen.Condition) ISecretBookDo
	Select(conds ...field.Expr) ISecretBookDo
	Where(conds ...gen.Condition) ISecretBookDo
	Order(conds ...field.Expr) ISecretBookDo
	Distinct(cols ...field.Expr) ISecretBookDo
	Omit(cols ...field.Expr) ISecretBookDo
	Join(table schema.Tabler, on ...field.Expr) ISecretBookDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISecretBookDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISecretBookDo
	Group(cols ...field.Expr) ISecretBookDo
	Having(conds ...gen.Condition) ISecretBookDo
	Limit(limit int) ISecretBookDo
	Offset(offset int) ISecretBookDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISecretBookDo
	Unscoped() ISecretBookDo
	Create(values ...*model.SecretBook) error
	CreateInBatches(values []*model.SecretBook, batchSize int) error
	Save(values ...*model.SecretBook) error
	First() (*model.SecretBook, error)
	Take() (*model.SecretBook, error)
	Last() (*model.SecretBook, error)
	Find() ([]*model.SecretBook, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SecretBook, err error)
	FindInBatches(result *[]*model.SecretBook, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SecretBook) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISecretBookDo
	Assign(attrs ...field.AssignExpr) ISecretBookDo
	Joins(fields ...field.RelationField) ISecretBookDo
	Preload(fields ...field.RelationField) ISecretBookDo
	FirstOrInit() (*model.SecretBook, error)
	FirstOrCreate() (*model.SecretBook, error)
	FindByPage(offset int, limit int) (result []*model.SecretBook, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISecretBookDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s secretBookDo) Debug() ISecretBookDo {
	return s.withDO(s.DO.Debug())
}

func (s secretBookDo) WithContext(ctx context.Context) ISecretBookDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s secretBookDo) ReadDB() ISecretBookDo {
	return s.Clauses(dbresolver.Read)
}

func (s secretBookDo) WriteDB() ISecretBookDo {
	return s.Clauses(dbresolver.Write)
}

func (s secretBookDo) Session(config *gorm.Session) ISecretBookDo {
	return s.withDO(s.DO.Session(config))
}

func (s secretBookDo) Clauses(conds ...clause.Expression) ISecretBookDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s secretBookDo) Returning(value interface{}, columns ...string) ISecretBookDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s secretBookDo) Not(conds ...gen.Condition) ISecretBookDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s secretBookDo) Or(conds ...gen.Condition) ISecretBookDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s secretBookDo) Select(conds ...field.Expr) ISecretBookDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s secretBookDo) Where(conds ...gen.Condition) ISecretBookDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s secretBookDo) Order(conds ...field.Expr) ISecretBookDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s secretBookDo) Distinct(cols ...field.Expr) ISecretBookDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s secretBookDo) Omit(cols ...field.Expr) ISecretBookDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s secretBookDo) Join(table schema.Tabler, on ...field.Expr) ISecretBookDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s secretBookDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISecretBookDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s secretBookDo) RightJoin(table schema.Tabler, on ...field.Expr) ISecretBookDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s secretBookDo) Group(cols ...field.Expr) ISecretBookDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s secretBookDo) Having(conds ...gen.Condition) ISecretBookDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s secretBookDo) Limit(limit int) ISecretBookDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s secretBookDo) Offset(offset int) ISecretBookDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s secretBookDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISecretBookDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s secretBookDo) Unscoped() ISecretBookDo {
	return s.withDO(s.DO.Unscoped())
}

func (s secretBookDo) Create(values ...*model.SecretBook) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s secretBookDo) CreateInBatches(values []*model.SecretBook, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s secretBookDo) Save(values ...*model.SecretBook) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s secretBookDo) First() (*model.SecretBook, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SecretBook), nil
	}
}

func (s secretBookDo) Take() (*model.SecretBook, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SecretBook), nil
	}
}

func (s secretBookDo) Last() (*model.SecretBook, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SecretBook), nil
	}
}

func (s secretBookDo) Find() ([]*model.SecretBook, error) {
	result, err := s.DO.Find()
	return result.([]*model.SecretBook), err
}

func (s secretBookDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SecretBook, err error) {
	buf := make([]*model.SecretBook, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s secretBookDo) FindInBatches(result *[]*model.SecretBook, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s secretBookDo) Attrs(attrs ...field.AssignExpr) ISecretBookDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s secretBookDo) Assign(attrs ...field.AssignExpr) ISecretBookDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s secretBookDo) Joins(fields ...field.RelationField) ISecretBookDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s secretBookDo) Preload(fields ...field.RelationField) ISecretBookDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s secretBookDo) FirstOrInit() (*model.SecretBook, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SecretBook), nil
	}
}

func (s secretBookDo) FirstOrCreate() (*model.SecretBook, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SecretBook), nil
	}
}

func (s secretBookDo) FindByPage(offset int, limit int) (result []*model.SecretBook, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s secretBookDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s secretBookDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s secretBookDo) Delete(models ...*model.SecretBook) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *secretBookDo) withDO(do gen.Dao) *secretBookDo {
	s.DO = *do.(*gen.DO)
	return s
}
